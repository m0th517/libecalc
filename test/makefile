# c++ compiler with flag to
# keep symbols.
CXX = clang++ -g

# common compiler flags and specific
# flags for each target.
 
# c++11 compilance and dependency gen 
CXX_COMMON_FLAGS  = -std=c++11 -MMD -MP	
# max optimization and no warnings
CXX_FLAGS_RELEASE = $(CXX_COMMON_FLAGS) -O3 -w				 
# no optimisation and all warnings 
# and disable c++98 compilance
CXX_FLAGS_DEBUG   = $(CXX_COMMON_FLAGS) -O0 -Weverything -Wno-c++98-compat		

# search paths for header files
INCLUDES = -I ../include \
		   -I ../../poker/include \
		   -I ../../../dep/UnitTest++/src

# add paths of libraries the
# targets depend on.
LIBRARIES = -L ./.. -lecalc \
			-L ../../poker/dist/Release -lpoker \
			-L ../../../dep/UnitTest++ -lUnitTest++ 

# name of the generated binary
# for each target
OUT_BIN_RELEASE = run_tests
OUT_BIN_DEBUG   = run_tests_dbg

# gather all source files and define
# where the object files of each target go.
CPP_FILES = $(wildcard *.cpp)

OBJ_FILES_RELEASE = $(addprefix obj/release/,$(notdir $(CPP_FILES:.cpp=.o)))
DEP_FILES_RELEASE   = $(OBJ_FILES_RELEASE:.o=.d)

OBJ_FILES_DEBUG = $(addprefix obj/debug/,$(notdir $(CPP_FILES:.cpp=.o)))
DEP_FILES_DEBUG = $(OBJ_FILES_DEBUG:.o=.d)

# implict targets to build source files
obj/release/%.o: %.cpp
	$(CXX) $(INCLUDES) $(CXX_COMMON_FLAGS) $(CXX_FLAGS_RELEASE) -c -o $@ $<

obj/debug/%.o: %.cpp
	$(CXX) $(INCLUDES) $(CXX_COMMON_FLAGS) $(CXX_FLAGS_DEBUG) -c -o $@ $<

# link targets with their specific
# target options.
release: $(OBJ_FILES_RELEASE)
	$(CXX) $(INCLUDES) $(OBJ_FILES_RELEASE) $(LIBRARIES) -o $(OUT_BIN_RELEASE)

debug: $(OBJ_FILES_DEBUG)
	$(CXX) $(INCLUDES) $(OBJ_FILES_DEBUG) $(LIBRARIES) -o $(OUT_BIN_DEBUG)

# target cleans all files generated by 
# the buildprocess.
.PHONY: clean
clean:
	rm -f $(OBJ_FILES_RELEASE)
	rm -f $(DEP_FILES_RELEASE)
	rm -f $(OBJ_FILES_DEBUG)
	rm -f $(DEP_FILES_DEBUG)
	rm -f $(OUT_BIN_RELEASE)
	rm -f $(OUT_BIN_DEBUG)

all: release 

-include $(DEPENDS)
