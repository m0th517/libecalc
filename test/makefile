# c++ compiler with flag to
# keep symbols.
CXX = clang++ -g

# c++11 compilance and dependency gen 
# and disable c++98 compilance
CXXFLAGS  = -std=c++11 -MMD -MP

# search paths for header files
INCLUDES = -I ../include/ecalc \
		   -I ../dep/libpoker/include \
		   -I /usr/include/UnitTest++

# add paths of libraries the
# targets depend on.
LIBRARIES = -L ./../lib/$(target) -lecalc \
			-L ../dep/libpoker/lib/$(target) -lpoker \
			-L /usr/lib/UnitTest++ -lUnitTest++ 

# gather all source files and define
# where the object files of each target go.
CPP_FILES = $(wildcard *.cpp)
OBJ_FILES = $(addprefix obj/$(target)/,$(notdir $(CPP_FILES:.cpp=.o)))
DEP_FILES = $(OBJ_FILES:.o=.d)

ifeq ($(target),debug)
	CXXFLAGS +=-O0 -Weverything -Wno-c++98-compat
else
    target = release
	CXXFLAGS +=-O3 -Wall
endif

OUT_BIN = bin/$(target)/tests

# implict targets to build source files
obj/$(target)/%.o: %.cpp
	$(CXX) $(INCLUDES) $(CXXFLAGS) -c -o $@ $<

# link targets with their specific
# target options.
$(OUT_BIN): prepare $(OBJ_FILES)
	$(CXX) $(INCLUDES) $(OBJ_FILES) $(LIBRARIES) -o $(OUT_BIN)

prepare:
	mkdir -p bin/{release,debug}
	mkdir -p obj/{release,debug}

run:
	cd bin/$(target) && ./tests

# target cleans all files generated by 
# the buildprocess.
.PHONY: clean
clean:
	rm -f $(OBJ_FILES)
	rm -f $(DEP_FILES)
	rm -f $(OUT_BIN)

all: $(OUT_BIN) 

-include $(DEP_FILES)
